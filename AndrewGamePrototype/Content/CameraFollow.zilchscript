class CameraFollow : ZilchComponent
{
  //between 0 and 1
  [Property]
  var LerpSpeed : Real = 0.25;
  
  [Property]
  var ResizeSpeed : Real = 1.5;
  
  [Property]
  var MinMaxSize : Real2 = Real2(5, 40);
  
  //this is for when the camera is following spread and what the default size should be when adjusting to the spread
  [Property]
  var MinCamSize : Real = 20;
  
  //target the camera will move to
  var Target : Cog = null;
  
  var Total : Real3 = Real3(0,0,10);
  
  function Initialize(init : CogInitializer)
  {
    //for testing
    //this.Target = this.Space.FindObjectByName("Player");
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    
    Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseScroll);
  }

  function OnMouseScroll(event : ViewportMouseEvent)
  {
    this.Owner.Camera.Size += -event.Scroll.Y * this.ResizeSpeed;
    
    this.Owner.Camera.Size = Math.Clamp(this.Owner.Camera.Size, this.MinMaxSize.X, this.MinMaxSize.Y);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    Console.WriteLine(this.Owner.Transform.Translation);
    var i : Integer = 0;
  
    //loop through the array
    for(i; i < this.GameSession.GameVars.BulletArray.Count; ++i)
    {
      //get rid of any nulls
      if(this.GameSession.GameVars.BulletArray[i] == null)
      {
        this.GameSession.GameVars.BulletArray.RemoveAt(i);
      }
    }
    if(this.GameSession.GameVars.BulletArray.Count != 0)
    {
      this.Total = Real3(0,0,10);
      this.CameraPosition();
    }
    else
    {
      this.Owner.Camera.Size = 20;
      //If our target exists
      if(this.Target != null)
      {
        var currentTranslation = this.Owner.Transform.WorldTranslation;
        var targetTranslation = Real3(this.Target.Transform.WorldTranslation.XY, currentTranslation.Z);
        
        this.Owner.Transform.WorldTranslation = Math.Lerp(currentTranslation, targetTranslation, this.LerpSpeed);
      }
    }
  }
  
  //this function gets where the camera should be
  function CameraPosition()
  {
    if(this.GameSession.GameVars.BulletArray.Count == 1)
    {
      
    }
    //find the lowest and highest x and y values
    foreach(var x : Cog in this.GameSession.GameVars.BulletArray)
    {
      if(x != null)
      {
        this.Total.X += x.Transform.Translation.X;
        this.Total.Y += x.Transform.Translation.Y;
      }
    }
    
    //get the middle of the x and y
    this.Total.XY /= this.GameSession.GameVars.BulletArray.Count;
    var currentTranslation = this.Owner.Transform.WorldTranslation;
    var targetTranslation = Real3(this.Total.XY, this.Total.Z);
    //find the greatest distane from the two poitns and set the camera size to that
    this.Owner.Transform.WorldTranslation = Math.Lerp(currentTranslation, targetTranslation, this.LerpSpeed);
    if(Math.Abs(this.Total.X) > Math.Abs(this.Total.Y) && this.GameSession.GameVars.BulletArray.Count != 0)
    {
      this.Owner.Camera.Size = Math.Abs(this.Owner.Transform.Translation.X - this.Total.X) + this.MinCamSize;
    }
    else
    {
      this.Owner.Camera.Size = Math.Abs(this.Owner.Transform.Translation.Y - this.Total.Y) + this.MinCamSize;
    }
          Console.WriteLine(this.Owner.Camera.Size);
  }
}
