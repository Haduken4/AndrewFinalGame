class BouncySpawn : ZilchComponent
{
  //the leftmost x position to spawn
  [Property]
  var MinSpawnX : Real = -50.0;
  
  //the rightmost x position to spawn
  [Property]
  var MaxSpawnX : Real = 50.0;
  
  //the topmost y position to spawn
  [Property]
  var MaxSpawnY : Real = 50.0;
  
    //the bottommost y position to spawn
  [Property]
  var MinSpawnY : Real = -50.0;
  
  
  //sphere properties
  
  //the maximum number of spheres to spawn
  [Property]
  var MaxSpawnCount : Integer = 5;
  
  //min radius size
  [Property]
  var MinDiameterSize : Real = 1.0;
  
  //max radius size
  [Property]
  var MaxDiameterSize : Real = 10.0;
  
  //Max amount of tries to spawn a bouncy object
  [Property]
  var MaxTries : Integer = 100;
  
  //random number generator
  var RandomGenerator : Random = Random();
  
  function Initialize(init : CogInitializer)
  {
    
    
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    //roll random # of spheres to spawn
    var spawnCount = this.RandomGenerator.RangeInclusiveMax(0, this.MaxSpawnCount);
    for(var i = 0; i < spawnCount; ++i)
    {
      //create random sphere
      var diameter = this.RandomGenerator.Range(this.MinDiameterSize, this.MaxDiameterSize);
      var posX = this.RandomGenerator.Range(this.MinSpawnX, this.MaxSpawnX);
      var posY = this.RandomGenerator.Range(this.MinSpawnY, this.MaxSpawnY);
      
      var radius = diameter / 2.0;
      
      
      //check if valid
      var center = Real3(posX, posY, 0.1);
      var count = 10;
      
      var filter = CastFilter();
      
      var results = this.Space.PhysicsSpace.CastSphere(Sphere(center, radius), count, CastFilter());
      
      var tries = 0;
      
      while(!results.IsEmpty && tries < this.MaxTries)
      {
        posX = this.RandomGenerator.Range(this.MinSpawnX, this.MaxSpawnX);
        posY = this.RandomGenerator.Range(this.MinSpawnY, this.MaxSpawnY);
        center = Real3(posX, posY, 0.1);
        
        results = this.Space.PhysicsSpace.CastSphere(Sphere(center, radius), count, CastFilter());
        ++tries;
        
      }
      //transform - scale and pos
      var object = this.Space.CreateAtPosition(Archetype.BouncyTerrain, center);
      object.Transform.Scale = Real3(diameter, diameter, 1);
    }
    
    Zero.Disconnect(this.Space, Events.LogicUpdate, this);
  }
}
