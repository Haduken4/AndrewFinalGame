class ShootVariables
{
  //Weapon icon for display
  [Property]
  var Icon : SpriteSource = null;
  
  //Projectile archetype
  [Property]
  var Projectile : Archetype = null;
  
  //Amount of projectiles we will fire
  [Property]
  var ProjectileCount : Integer = 1;
  
  //This is in radians
  [Property]
  var SpreadCone : Real = Math.Pi / 4;
  
  //How fast the projectile will go when fired (not divided by DT)
  [Property]
  var ProjectileSpeed : Real = 100;

}

class PlayerShooting : ZilchComponent
{
  
  [Property]
  var Weapon : ShootVariables = ShootVariables();
  
  var Random : Random = Random();
  
  [Property]
  var Active : Boolean = true;
  
  var CurrProjectile : Cog = null;
  
  //weapons inventory
  var Weapons : Array[ShootVariables] = Array[ShootVariables]();
  
  //weapon index
  var CurrWeapon : Integer = 0;

  //timer for the bullet
  var Timer : Real = 0;
  
  //bool that should turn on when a bullet is fired
  var BBool : Boolean = false;
  
  function Initialize(init : CogInitializer)
  {
    this.Weapons.Add(this.Weapon);
    
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    
    Zero.Connect(this.Space, Events.LeftMouseUp, this.OnLeftMouseUp);
    
    this.GameSession.FindSpaceByName("HUDSpace").FindObjectByName("LevelSettings").HUDManager.UpdateWeapons();

  }

  function OnLeftMouseUp(event : ViewportMouseEvent)
  {
    if(this.Active)
    {
      var mousePos = this.Space.FindObjectByName("GameCamera").CameraViewport.ScreenToWorldZPlane(event.Position, 0);
      
      var dir = mousePos - this.Owner.Transform.WorldTranslation;
      
      var angleToMouse = Math.ATan2(dir.Y, dir.X);
      
      
      
      if(this.Weapon.Projectile != null)
      {
        
        Console.WriteLine("Happened");
      
        for(var i = 0; i < this.Weapon.ProjectileCount; ++i)
        {
          this.CurrProjectile = this.Space.CreateAtPosition(this.Weapon.Projectile, this.Owner.Transform.WorldTranslation);
          
          var currAngle = angleToMouse + this.Random.Range(-this.Weapon.SpreadCone, this.Weapon.SpreadCone);
          
          this.CurrProjectile.RigidBody.Velocity = CustomMath.DirectionFromAngle(currAngle) * this.Weapon.ProjectileSpeed;
          
          this.Space.FindObjectByName("GameCamera").CameraFollow.Target = this.CurrProjectile;
          
          this.BBool = true;
          
          
        }
      }
      
    }
    
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    if(this.Active)
    {
      //go left in weapon array
      if(Zero.Keyboard.KeyIsPressed(Keys.Q))
      {
        --this.CurrWeapon;
        //wrap to right if out of bounds
        if(this.CurrWeapon < 0)
        {
          this.CurrWeapon = this.Weapons.Count -1;
        }
        this.Weapon = this.Weapons[this.CurrWeapon];
        
        this.GameSession.FindSpaceByName("HUDSpace").FindObjectByName("LevelSettings").HUDManager.UpdateWeapons();
        
      }
      //go right in weapon array
      if(Zero.Keyboard.KeyIsPressed(Keys.E))
      {
        ++this.CurrWeapon;
        //wrap to left if out of bounds
        if(this.CurrWeapon >= this.Weapons.Count)
        {
          this.CurrWeapon = 0;
        }
        this.Weapon = this.Weapons[this.CurrWeapon];
        
        this.GameSession.FindSpaceByName("HUDSpace").FindObjectByName("LevelSettings").HUDManager.UpdateWeapons();
      }
    }
    if(this.BBool && this.CurrProjectile == null)
    {
      this.Timer += event.Dt;
      if(this.Timer > 3)
      {
        this.LevelSettings.PlayerTurnManager.TurnBool = true;
        this.Timer = 0;
        this.BBool = false;
      }
    }
  }
}
