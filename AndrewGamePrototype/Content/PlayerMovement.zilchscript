class PlayerMovement : ZilchComponent
{
  //How fast we move left/right
  [Property]
  var MoveSpeed : Real = 250;
  
  //How fast we jump
  [Property]
  var JumpSpeed : Real = 10;
  
  //How much we can move per turn
  [Property]
  var MaxMoveResource : Real = 10;
  
  //sound for the jumping
  [Property]
  var SoundToPlay : SoundCue = null;
  
  //This should be the jump animation that will place where the frog
  [Property]
  var JumpAnimation : Archetype = null;
  
  //How much more we can move this turn
  var CurrMoveResource : Real = 10;
  
  //Whether our movement is locked (used with jumping)
  var LockMovement : Boolean = true;
  
  //Whether the mouse is down (used to draw debug line)
  var MouseIsDown : Boolean = false;
  
  //Used to track winning player
  var Index : Integer = 0;
  
  //whether we active
  [Property]
  var Active : Boolean = false;
  
  function Initialize(init : CogInitializer)
  {
    this.CurrMoveResource = this.MaxMoveResource;
    
    //Connect stuff
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    
    Zero.Connect(this.Space, Events.LeftMouseDown, this.OnLeftMouseDown);
    Zero.Connect(this.Space, Events.LeftMouseUp, this.OnLeftMouseUp);
    
    Zero.Connect(this.Owner, Events.CogDestroy, this.OnCogDestroy);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
  }

  function OnCollisionStarted(event : CollisionEvent)
  {
    //if we hit the floor
    if(event.FirstPoint.WorldPoint.Y < this.Owner.Transform.WorldTranslation.Y && event.OtherObject.Collider.CollisionGroup != CollisionGroup.Destructable)
    {
      this.LockMovement = false;
    }
  }

  function OnLeftMouseUp(event : ViewportMouseEvent)
  {
    //If we can jump
    if(this.Active && this.CurrMoveResource > this.MaxMoveResource / 2 && !this.LockMovement)
    {
      this.Space.CreateAtPosition(this.JumpAnimation, this.Owner.Transform.Translation - Real3(0,0.75,0));
      
      var mousePos = event.ToWorldZPlane(0);
      var dirToAngle = Math.Normalize(mousePos - this.Owner.Transform.WorldTranslation);
      
      var angleToMouse = Math.ATan2(dirToAngle.Y, dirToAngle.X);
      
      var dirToMouse = CustomMath.DirectionFromAngle(angleToMouse);
      
      this.Owner.RigidBody.Velocity += dirToMouse * this.JumpSpeed;
      
      this.CurrMoveResource -= this.MaxMoveResource / 2;
      
      this.Space.SoundSpace.PlayCue(this.SoundToPlay);
      
      this.LockMovement = true;
      
      this.MouseIsDown = false;
      
      
    }
    
  }

  function OnLeftMouseDown(event : ViewportMouseEvent)
  {
    //If we can jump
    if(this.Active && this.CurrMoveResource > this.MaxMoveResource / 2)
    {
      this.MouseIsDown = true;
      
    }
  }

  function OnCogDestroy(event : ObjectEvent)
  {
    //when we die remove us from the turn manager
    this.LevelSettings.PlayerTurnManager.PlayerArray.RemoveFirst(this.Owner);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    
    var vel = this.Owner.RigidBody.Velocity;
    
    //If our movement isn't locked, move left/right/nowhere
    if(!this.LockMovement)
    {
      if(this.Active && this.CurrMoveResource > 0)
      {
        if(Zero.Keyboard.KeyIsDown(Keys.A))
        {
          this.Owner.Sprite.FlipX = true;
          vel.X = -1 * this.MoveSpeed * event.Dt;
          this.CurrMoveResource -= event.Dt;
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.D))
        {
          this.Owner.Sprite.FlipX = false;
          vel.X = 1 * this.MoveSpeed * event.Dt;
          this.CurrMoveResource -= event.Dt;
        }
        else
        {
          vel.X = 0;
        }
        
        this.Owner.RigidBody.Velocity = vel;
        
      }
      else
      {
        vel.X = 0;
      }
    }
    
    this.Owner.RigidBody.Velocity = vel;
    
    //If the mouse is down, draw a debug line
    if(this.MouseIsDown)
    {
      var mousePos = Zero.Mouse.ClientPosition;
      
      var screenMousePos = this.Space.FindObjectByName("GameCamera").CameraViewport.ScreenToWorldZPlane(mousePos, 0);
      
      var dirToAngle = Math.Normalize(screenMousePos - this.Owner.Transform.WorldTranslation);
      
      var angleToMouse = Math.ATan2(dirToAngle.Y, dirToAngle.X);
      
      var dirToMouse = CustomMath.DirectionFromAngle(angleToMouse);
      
      var debugLine = DebugLine(this.Owner.Transform.WorldTranslation, this.Owner.Transform.WorldTranslation + dirToMouse * 5);
      
      debugLine.Color = Real4(1, 0, 1, 1);
      
      DebugDraw.Add(debugLine);
    
      if(screenMousePos.X > this.Owner.Transform.WorldTranslation.X)
      {
        Console.WriteLine("right");
        this.Owner.Sprite.FlipX = false;
      }
      else if(screenMousePos.X < this.Owner.Transform.WorldTranslation.X)
      {
        Console.WriteLine("left");
        this.Owner.Sprite.FlipX = true;
      }
    }
    
  }
  
  //Activate our movement
  function Activate()
  {
    this.CurrMoveResource = this.MaxMoveResource;
    this.Active = true;
  }
}
