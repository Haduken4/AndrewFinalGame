/*************************
Authors: Bar Ben-zvi, Tsering Ngoche, Christian Yan, Nicole Smith, Andrew Yan
Date Created: 5/21/19
Brief: Manages player turns
*************************/

//Turn states
enum TurnState{STATEMOVE, STATESHOOT}

class PlayerTurnManager : ZilchComponent
{
  [Property]
  var Tutorial : Boolean = false;
  
  var CurrState : TurnState = TurnState.STATEMOVE;
  
  //Stores all the players on the level
  var PlayerArray : Array[Cog] = Array[Cog]();
  
  //The current index of the player array we are on
  var CurrIndex : Integer = 0;
  
  //The camera of this level
  var Camera : Cog = null;
  
  //Stores the hud manager on the hud space
  var HUDManager : HUDManager = null;
  
  //How much time per Phase
  [Property]
  var TimerPerPhase : Real = 30;
  
  //Bool to toggle switch phases or turn
  var TurnBool : Boolean = false;
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    
    //Set cog variables and the player array
    var hudSpace = this.GameSession.FindSpaceByName("HUDSpace");
    
    this.HUDManager = hudSpace.FindObjectByName("LevelSettings").HUDManager;
    
    this.Camera = this.Space.FindObjectByName("GameCamera");
    
    var players = this.Space.FindAllObjectsByName("Player");
    
    foreach(var p in players)
    {
      this.PlayerArray.Add(p);
      p.PlayerMovement.Index = this.PlayerArray.Count;
    }
    
    this.PlayerArray[this.CurrIndex].PlayerMovement.Activate();
    this.PlayerArray[this.CurrIndex].BoxCollider.CollisionGroup = CollisionGroup.CurrentPlayer;
    
    this.Camera.CameraFollow.Target = this.PlayerArray[this.CurrIndex];
    this.HUDManager.CurrPlayer = this.PlayerArray[this.CurrIndex];
    
    if(!this.Tutorial)
    {
      if(this.CurrIndex == 0)
      {
        this.HUDManager.OtherPlayer = this.PlayerArray[this.CurrIndex + 1];
      }
      else if(this.CurrIndex == 1)
      {
        this.HUDManager.OtherPlayer = this.PlayerArray[this.CurrIndex - 1];
      }
    }
    
    this.HUDManager.Index = 1;
    
    this.HUDManager.UpdateWeapons();
    
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    //If the player presses L, this ends the current state
    if((Zero.Keyboard.KeyIsPressed(Keys.Tab) && this.CurrState == TurnState.STATEMOVE) || this.TurnBool)
    {
      this.TurnBool = false;
      //If we are currently on the move state, we only need to change to the shoot state
      if(this.CurrState == TurnState.STATEMOVE)
      {
        this.PlayerArray[this.CurrIndex].PlayerMovement.Active = false;
        this.PlayerArray[this.CurrIndex].PlayerMovement.CurrMoveResource = 0;
        this.PlayerArray[this.CurrIndex].PlayerShooting.Activate();
        this.CurrState = TurnState.STATESHOOT;
        this.HUDManager.CurrState = TurnState.STATESHOOT;
      }
      //If we are currently on the shoot state, we need to progress to the next player and activate their movement
      else
      {
        this.PlayerArray[this.CurrIndex].PlayerShooting.Active = false;
        this.PlayerArray[this.CurrIndex].BoxCollider.CollisionGroup = CollisionGroup.Player;
        
        this.CurrIndex += 1;
        
        if(this.CurrIndex >= this.PlayerArray.Count)
        {
          this.CurrIndex = 0;
        }
        
        if(!this.Tutorial)
        {
          if(this.CurrIndex == 0)
          {
            this.HUDManager.OtherPlayer = this.PlayerArray[this.CurrIndex + 1];
          }
          else if(this.CurrIndex == 1)
          {
            this.HUDManager.OtherPlayer = this.PlayerArray[this.CurrIndex - 1];
          }
        }
        
        this.PlayerArray[this.CurrIndex].PlayerMovement.Activate();
        this.CurrState = TurnState.STATEMOVE;
        this.HUDManager.CurrState = TurnState.STATEMOVE;
        
        //Update the camerafollow and hudmanager
        this.Camera.CameraFollow.Target = this.PlayerArray[this.CurrIndex];
        this.HUDManager.CurrPlayer = this.PlayerArray[this.CurrIndex];
        this.HUDManager.Index = this.CurrIndex + 1;
        
        this.PlayerArray[this.CurrIndex].BoxCollider.CollisionGroup = CollisionGroup.CurrentPlayer;
        
        if(!this.Tutorial)
        {
          var text = this.Space.FindObjectByName("GameCamera").FindChildByName("TransitionText");
          text.SpriteText.Text = "Player `this.CurrIndex + 1`'s Turn!";
          text.FadeOut.FadeIn = true;
        }
        
        this.HUDManager.UpdateWeapons();
      }
    }
    
    if(this.PlayerArray.Count == 1 && !this.Tutorial)
    {
      this.GameSession.FindSpaceByName("HUDSpace").Destroy();
      this.GameSession.GameVars.WinningPlayer = this.PlayerArray[0].PlayerMovement.Index;
      this.Space.LoadLevel(Level.EndScreen);
    }
    
  }
}
 