/*****
Filename: DestructableCustomCollision.zilchscript
Author(s): Bar Ben-zvi, Nicole Smith
Date Created: 5/23/2019
Brief: Handles custom collision for destructable terrain, only things with the CustomCollisionVariables script will be
       handled
*****/
class DestructableCustomCollision : ZilchComponent
{
  
  //Arrays to store destruction
  var DestructionCenterArray : Array[Real3] = Array[Real3]();
  var DestructionRadiusArray : Array[Real] = Array[Real]();
  
  
  function Initialize(init : CogInitializer)
  {
    //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
  }

  function OnCollisionPersisted(event : CollisionEvent)
  {
    //If the other object can handle custom collision
    if(event.OtherObject.CustomCollisionVariables != null)
    {
      if(event.OtherObject.BoxCollider != null)
      {
        this.CheckCollisionRectangle(event.OtherObject);
      }
      else if(event.OtherObject.SphereCollider != null)
      {
        this.CheckCollisionCircle(event.OtherObject);
      }
    }
  }

  function OnCollisionStarted(event : CollisionEvent)
  {
    //If the other object can handle custom collision
    if(event.OtherObject.CustomCollisionVariables != null)
    {
      if(event.OtherObject.BoxCollider != null)
      {
        this.CheckCollisionRectangle(event.OtherObject);
      }
      else if(event.OtherObject.SphereCollider != null)
      {
        this.CheckCollisionCircle(event.OtherObject);
      }
    }
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
  }
  
  //Checks and resolves collision with a rectangle collider
  function CheckCollisionRectangle(object : Cog)
  {
    
    //////////////////////////////////////////////////////////////////////////////
    // CONTACT POINTS (PROBABLY BETTER, CURRENTLY NOT WORKING)
    //////////////////////////////////////////////////////////////////////////////
    
    //Go through each contact
    /*foreach(var contact in object.BoxCollider.Contacts)
    {
      //If the contact is this object, check contact points to see if we're colliding
      if(contact.OtherObject == this.Owner)
      {
        var collidingArray = Array[Boolean](contact.ContactPointCount, true);
        var index = 0;
        
        foreach(var point in contact.ContactPoints)
        {
          for(var i = 0; i < this.DestructionCenterArray.Count; ++i)
          {
            var distance = Math.Distance(point.WorldPoint, this.DestructionCenterArray[i]);
          
            if(distance <= this.DestructionRadiusArray[i])
            {
              collidingArray[index] = false;
            }
          }
          ++index;
        }
        
        for(var i = 0; i < collidingArray.Count; ++i)
        {
          if(collidingArray[i])
          {
            //If the other object explodes, explode it
            if(object.CustomCollisionVariables.Explodes)
            {
              this.DestructionCenterArray.Add(object.Transform.WorldTranslation);
              this.DestructionRadiusArray.Add(object.CustomCollisionVariables.ExplosionRadius);
              
              object.Destroy();
            }
            
            object.Transform.WorldTranslation = object.CustomCollisionVariables.LastFramePos;
          }
        }
        
      }
    }*/
    
    //////////////////////////////////////////////////////////////////////////////
    // EXTENT BASED POINTS (MAYBE BETTER THAN CONTACT POINTS?)
    //////////////////////////////////////////////////////////////////////////////
    
    //Store corners of the rectangle
    var extentPoints : Array[Real3] = Array[Real3]();
    
    //Using extents to get the corners
    var objExtents = object.BoxCollider.HalfSize.XY * object.Transform.WorldScale.XY;
    
    var offset = object.BoxCollider.Offset * object.Transform.WorldScale;
    
    
    //Corners
    extentPoints.Add(Real3(object.Transform.WorldTranslation.XY + objExtents, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.XY - objExtents, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X, object.Transform.WorldTranslation.Y - objExtents.Y, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X, object.Transform.WorldTranslation.Y + objExtents.Y, 0) + offset);
    
    //Sides
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X, object.Transform.WorldTranslation.Y + objExtents.Y * 0.5, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X, object.Transform.WorldTranslation.Y - objExtents.Y * 0.5, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X, object.Transform.WorldTranslation.Y + objExtents.Y * 0.5, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X, object.Transform.WorldTranslation.Y - objExtents.Y * 0.5, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X, object.Transform.WorldTranslation.Y + objExtents.Y * 0.25, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X, object.Transform.WorldTranslation.Y - objExtents.Y * 0.25, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X, object.Transform.WorldTranslation.Y + objExtents.Y * 0.25, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X, object.Transform.WorldTranslation.Y - objExtents.Y * 0.25, 0) + offset);
    
    //Top/bottom
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X * 0.5, object.Transform.WorldTranslation.Y + objExtents.Y, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X * 0.5, object.Transform.WorldTranslation.Y + objExtents.Y, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X * 0.5, object.Transform.WorldTranslation.Y - objExtents.Y, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X * 0.5, object.Transform.WorldTranslation.Y - objExtents.Y, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X * 0.25, object.Transform.WorldTranslation.Y + objExtents.Y, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X * 0.25, object.Transform.WorldTranslation.Y + objExtents.Y, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X + objExtents.X * 0.25, object.Transform.WorldTranslation.Y - objExtents.Y, 0) + offset);
    extentPoints.Add(Real3(object.Transform.WorldTranslation.X - objExtents.X * 0.25, object.Transform.WorldTranslation.Y - objExtents.Y, 0) + offset);
    
    //Array that stores whether each corner is colliding (if any of these remain true, we are "colliding")
    var colliding = Array[Boolean](extentPoints.Count, true);
    
    //Loop through each corner
    for(var i = 0; i < extentPoints.Count; ++i)
    {
      //Loop through each destruction circle
      for(var j = 0; j < this.DestructionCenterArray.Count; ++j)
      {
        var distance = Math.Distance(extentPoints[i], this.DestructionCenterArray[j]);
        
        if(distance <= this.DestructionRadiusArray[j])
        {
          colliding[i] = false;
        }
      }
      
    }
    
    //Check collisions
    for(var i = 0; i < extentPoints.Count; ++i)
    {
      if(colliding[i])
      {
        
        //If this point isn't actually colliding with our collider, we can ignore it
        if(!this.IsPointColliding(extentPoints[i]))
        {
          continue;
        }
        
        //If the other object explodes, explode it
        if(object.CustomCollisionVariables.Explodes)
        {
          this.DestructionCenterArray.Add(object.Transform.WorldTranslation);
          this.DestructionRadiusArray.Add(object.CustomCollisionVariables.ExplosionRadius);
          
          object.Destroy();
        }
        
        //object.Transform.WorldTranslation = object.CustomCollisionVariables.LastFramePos;
        
        if(CustomMath.Magnitude(object.RigidBody.Velocity) != 0)
        {
          var newVel = object.RigidBody.Velocity;
          var newTra = object.Transform.WorldTranslation;
          
          for(var j = 0; j < extentPoints.Count; ++j)
          {
            if(this.IsPointColliding(extentPoints[j]))
            {
              if(j > 3 && j < 12)
              {
                newVel.X = 0;
                newTra.X = object.CustomCollisionVariables.LastFramePos.X;
              }
              else if(j >= 12)
              {
                newVel.Y = 0;
                newTra.Y = object.CustomCollisionVariables.LastFramePos.Y;
              }
            }
          }
          
          var origVel = object.RigidBody.Velocity;
          
          object.Transform.WorldTranslation = newTra;
          object.RigidBody.Velocity = newVel;
          
          //Handle player specific collision resolution
          if(object.PlayerMovement != null)
          {
            
            //moving left and colliding below
            if(origVel.X < 0 && i == 1  && object.PlayerMovement.LockMovement == false && this.DestructionCenterArray.Count > 0)
            {
              Console.WriteLine("Moving left");
              //since the player moved, move to new position
              //check nearest circle
              var nearestRadius = 1000.0;
              var nearestCircle = -1;
              for(var j = 0; j < this.DestructionCenterArray.Count; ++j)
              {
                if(Math.Distance(extentPoints[i], this.DestructionCenterArray[j]) < nearestRadius)
                {
                  nearestRadius = Math.Distance(extentPoints[i], this.DestructionCenterArray[j]);
                  nearestCircle = j;
                }
              }
              
              //find the slope of the circle at the collision point
              var radiusVector = extentPoints[i] - this.DestructionCenterArray[nearestCircle];
              //Console.WriteLine(extentPoints[i]);
              //Console.WriteLine(Real3(object.Transform.WorldTranslation.XY - objExtents, 0));
              
              var tangentVector = Real3(radiusVector.Y, -radiusVector.X, 0);
              var slope = Math.ATan2(tangentVector.Y, tangentVector.X);
              radiusVector = Math.Normalize(radiusVector) * this.DestructionRadiusArray[nearestCircle];
              //Console.WriteLine(180 - Math.ToDegrees(slope));
              
              //check if its not too steep
              if((180 - Math.ToDegrees(slope)) <=  object.CustomCollisionVariables.MaxSlope)
              {
                //move object
                var tangentPoint = this.DestructionCenterArray[nearestCircle] + radiusVector;
                var moveVector = tangentPoint - Real3(object.CustomCollisionVariables.LastFramePos.XY - objExtents, 0);
                if(moveVector.Y > 0)
                {
                  object.Transform.WorldTranslation += moveVector;
                }
                else
                {
                  object.Transform.WorldTranslation += Real3(moveVector.X, 0, 0);
                }
                //Console.WriteLine(moveVector);
              }
            }
            //if moving to the right and colliding at the bottom
            else if(origVel.X > 0 && i == 2 && object.PlayerMovement.LockMovement == false && this.DestructionCenterArray.Count > 0)
            {
              Console.WriteLine("Moving right");
              //since the player moved, move to new position
              //check nearest circle
              var nearestRadius = 1000.0;
              var nearestCircle = -1;
              for(var j = 0; j < this.DestructionCenterArray.Count; ++j)
              {
                if(Math.Distance(extentPoints[i], this.DestructionCenterArray[j]) < nearestRadius)
                {
                  nearestRadius = Math.Distance(extentPoints[i], this.DestructionCenterArray[j]);
                  nearestCircle = j;
                }
              }
              
              //find the slope of the circle at the collision point
              var radiusVector = extentPoints[i] - this.DestructionCenterArray[nearestCircle];
              Console.WriteLine(extentPoints[i]);
              Console.WriteLine(Real3(object.Transform.WorldTranslation.XY - objExtents, 0));
              
              var tangentVector = Real3(-radiusVector.Y, radiusVector.X, 0);
              var slope = Math.ATan2(tangentVector.Y, tangentVector.X);
              radiusVector = Math.Normalize(radiusVector) * this.DestructionRadiusArray[nearestCircle];
              Console.WriteLine(slope);
              
              //check if its not too steep
              if(Math.ToDegrees(slope) <=  object.CustomCollisionVariables.MaxSlope)
              {
                //move object
                var tangentPoint = this.DestructionCenterArray[nearestCircle] + radiusVector;
                var moveVector = tangentPoint - Real3(object.Transform.WorldTranslation.X + objExtents.X, object.Transform.WorldTranslation.Y - objExtents.Y, 0);
                if(moveVector.Y > 0)
                {
                  object.Transform.WorldTranslation += (moveVector - object.BoxCollider.Offset);
                }
                else
                {
                  object.Transform.WorldTranslation += (Real3(moveVector.X, 0, 0) - object.BoxCollider.Offset);
                }
                Console.WriteLine(moveVector);
              }
            }
            else
            {
              object.PlayerMovement.LockMovement = false;
            }
          }
        }
        
      }
    }
    
  }
  
  //Checks and resolves collision with a circle collider
  function CheckCollisionCircle(object : Cog)
  {
    
    //////////////////////////////////////////////////////////////////////////////
    // RADIUS BASED (BETTER THAN CONTACT POINTS FOR NOW)
    //////////////////////////////////////////////////////////////////////////////
    
    var objRad = object.SphereCollider.WorldRadius;
    var colliding = true;
    var translation = object.SphereCollider.WorldBoundingSphere.Center;
    
    
    var closestIndex = 0;
    
    
    for(var i = 0; i < this.DestructionCenterArray.Count; ++i)
    {
      
      var distance = Math.Distance(translation, this.DestructionCenterArray[i]);
      
      var currClosestDist = Math.Distance(translation, this.DestructionCenterArray[closestIndex]);
      
      if(distance - this.DestructionRadiusArray[i] < currClosestDist - this.DestructionRadiusArray[closestIndex])
      {
        closestIndex = i;
      }
      
      //If the other object is completely encompassed by one of the "destroyed" circles, it isn't colliding
      if(distance + objRad <= this.DestructionRadiusArray[i])
      {
        colliding = false;
      }
    }
    
    
    if(colliding)
    {
      Console.WriteLine(objRad);
      
      if(this.DestructionCenterArray.Count != 0)
      {
        //Get a direction directly away from the closest circle
        var dir = Math.Normalize(translation - this.DestructionCenterArray[closestIndex]);
        
        //Console.WriteLine(this.DestructionCenterArray[closestIndex] + (dir * objRad));
        
        //Check if the furthest point away on the circle from us and the center of the circle are colliding with us at all
        if(!this.IsPointColliding(this.DestructionCenterArray[closestIndex] + (dir * this.DestructionRadiusArray[closestIndex])))
        {
          
          Console.WriteLine("why");
          return;
        }
      }
      
      //If the other object explodes, explode it
      if(object.CustomCollisionVariables.Explodes)
      {
        if(object.CustomCollisionVariables.ExplosionRadius != 0)
        {
          this.DestructionCenterArray.Add(object.Transform.WorldTranslation);
          this.DestructionRadiusArray.Add(object.CustomCollisionVariables.ExplosionRadius);
          
          //Spawn a display
          var display = this.Space.CreateAtPosition(Archetype.DestructionDisplay, object.Transform.WorldTranslation + Real3(0, 0, 0.1));
          
          display.Transform.WorldScale = Real3(Real2(2, 2) * object.CustomCollisionVariables.ExplosionRadius, 1);
        }
        
        object.Destroy();
      }
      
      //Reset pos to last frame pos
      object.Transform.WorldTranslation = object.CustomCollisionVariables.LastFramePos;
      
      
      
    }
    
    //////////////////////////////////////////////////////////////////////////////
    // CONTACT POINTS
    //////////////////////////////////////////////////////////////////////////////
    
    /*foreach(var contact in object.SphereCollider.Contacts)
    {
      //If the contact is this object, check contact points to see if we're colliding
      if(contact.OtherObject == this.Owner)
      {
        var collidingArray = Array[Boolean](contact.ContactPointCount, true);
        var index = 0;
        
        foreach(var point in contact.ContactPoints)
        {
          for(var i = 0; i < this.DestructionCenterArray.Count; ++i)
          {
            var distance = Math.Distance(point.WorldPoint, this.DestructionCenterArray[i]);
          
            if(distance <= this.DestructionRadiusArray[i])
            {
              collidingArray[index] = false;
            }
          }
          ++index;
        }
        
        for(var i = 0; i < collidingArray.Count; ++i)
        {
          if(collidingArray[i])
          {
            //If the other object explodes, explode it
            if(object.CustomCollisionVariables.Explodes)
            {
              this.DestructionCenterArray.Add(object.Transform.WorldTranslation);
              this.DestructionRadiusArray.Add(object.CustomCollisionVariables.ExplosionRadius);
              
              //Spawn a display
              var display = this.Space.CreateAtPosition(Archetype.DestructionDisplay, object.Transform.WorldTranslation + Real3(0, 0, 0.1));
              
              display.Transform.WorldScale = Real3(Real2(2, 2) * object.CustomCollisionVariables.ExplosionRadius, 1);
              
              object.Destroy();
            }
            
            object.Transform.WorldTranslation = object.CustomCollisionVariables.LastFramePos;
          }
        }
        
      }
    }*/
    
  }
  
  //Checks if a specific point is colliding with our overall collider (doesn't take destruction into account)
  function IsPointColliding(point : Real3) : Boolean
  {
    //If we have a sphere collider
    if(this.Owner.SphereCollider != null)
    {
      var dist = Math.Distance(point, this.Owner.Transform.WorldTranslation);
      
      if(dist > this.Owner.SphereCollider.WorldRadius)
      {
        return false;
      }
    }
    //If we have a box collider
    else if(this.Owner.BoxCollider != null)
    {
      var results = this.Space.PhysicsSpace.CastSphere(Sphere(point, 0.01), 20, CastFilter());
      
      foreach(var collision in results)
      {
        if(collision.ObjectHit == this.Owner)
        {
          return true;
        }
      }
      
      return false;
    }
    else if(this.Owner.MultiConvexMeshCollider != null)
    {
      var results = this.Space.PhysicsSpace.CastSphere(Sphere(point, 0.01), 20, CastFilter());
      
      foreach(var collision in results)
      {
        if(collision.ObjectHit == this.Owner)
        {
          return true;
        }
      }
      
      return false;
    }
    
    //If we haven't returned anything yet, then this point is colliding with us
    return true;
  }
  
}
